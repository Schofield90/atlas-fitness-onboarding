#!/usr/bin/env node

// Database fixer script that intelligently handles existing tables
// Run with: node scripts/fix-database.js

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('🔧 Atlas Fitness Database Fix Tool');
console.log('==================================\n');

// Configuration
const MIGRATIONS_DIR = path.join(__dirname, '..', 'supabase', 'migrations');
const TEMP_DIR = '/tmp';

// Helper function to run commands
function runCommand(command, silent = false) {
  try {
    const output = execSync(command, { encoding: 'utf-8' });
    if (!silent) console.log(output);
    return output;
  } catch (error) {
    console.error(`❌ Error running command: ${command}`);
    console.error(error.message);
    return null;
  }
}

// Step 1: Check if Supabase CLI is available
console.log('1️⃣ Checking Supabase CLI...');
const supabaseVersion = runCommand('supabase --version', true);
if (!supabaseVersion) {
  console.error('❌ Supabase CLI not found. Please install it:');
  console.error('   brew install supabase/tap/supabase');
  process.exit(1);
}
console.log(`✅ Supabase CLI found: ${supabaseVersion.trim()}\n`);

// Step 2: Check if we're in a Supabase project
console.log('2️⃣ Checking Supabase project...');
const projectStatus = runCommand('supabase status', true);
if (!projectStatus || projectStatus.includes('not linked')) {
  console.error('❌ No Supabase project linked.');
  console.error('   Run: supabase link --project-ref <your-project-ref>');
  process.exit(1);
}
console.log('✅ Supabase project linked\n');

// Step 3: Create a diagnostic query
console.log('3️⃣ Creating diagnostic queries...');
const diagnosticSQL = `
-- Check existing tables
SELECT 
  table_name,
  CASE 
    WHEN table_name = 'organizations' THEN 'Core'
    WHEN table_name IN ('users', 'organization_members') THEN 'Auth'
    WHEN table_name IN ('leads', 'clients', 'opportunities') THEN 'CRM'
    WHEN table_name IN ('classes', 'class_sessions', 'bookings') THEN 'Booking'
    WHEN table_name IN ('staff', 'timesheets', 'payroll_batches') THEN 'Payroll'
    ELSE 'Other'
  END as category
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_type = 'BASE TABLE'
ORDER BY category, table_name;

-- Check if organizations table has slug column
SELECT 
  column_name, 
  data_type, 
  is_nullable
FROM information_schema.columns 
WHERE table_schema = 'public' 
AND table_name = 'organizations'
ORDER BY ordinal_position;
`;

fs.writeFileSync(path.join(TEMP_DIR, 'diagnostic.sql'), diagnosticSQL);
console.log('✅ Diagnostic queries created\n');

// Step 4: Run diagnostics
console.log('4️⃣ Running diagnostics...');
console.log('📊 Current database state:');
runCommand(`supabase db push ${TEMP_DIR}/diagnostic.sql`);

// Step 5: Create smart migration
console.log('\n5️⃣ Creating smart migration...');
const smartMigration = fs.readFileSync(
  path.join(MIGRATIONS_DIR, '0001_complete_multi_tenant_schema.sql'), 
  'utf-8'
);

// Remove the problematic system user insert
const fixedMigration = smartMigration
  .replace(/INSERT INTO users[^;]+;/g, '-- System user insert removed')
  .replace(/ON CONFLICT DO NOTHING;/g, '-- Conflict removed');

// Wrap each CREATE TABLE in existence check
const smartMigrationSQL = `
-- Smart migration with existence checks
-- Generated by fix-database.js

-- Enable extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "vector";
CREATE EXTENSION IF NOT EXISTS "pg_cron";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Helper function
CREATE OR REPLACE FUNCTION safe_create_table(
  table_sql text,
  table_name text
) RETURNS void AS $$
BEGIN
  IF NOT EXISTS (
    SELECT FROM information_schema.tables 
    WHERE table_schema = 'public' 
    AND table_type = 'BASE TABLE'
    AND information_schema.tables.table_name = safe_create_table.table_name
  ) THEN
    EXECUTE table_sql;
    RAISE NOTICE 'Created table: %', table_name;
  ELSE
    RAISE NOTICE 'Table already exists: %', table_name;
  END IF;
END;
$$ LANGUAGE plpgsql;

-- Fix organizations table if it exists without slug
DO $$
BEGIN
  IF EXISTS (
    SELECT FROM information_schema.tables 
    WHERE table_schema = 'public' AND table_name = 'organizations'
  ) AND NOT EXISTS (
    SELECT FROM information_schema.columns 
    WHERE table_schema = 'public' 
    AND table_name = 'organizations' 
    AND column_name = 'slug'
  ) THEN
    ALTER TABLE organizations ADD COLUMN slug TEXT;
    UPDATE organizations SET slug = LOWER(REPLACE(name, ' ', '-')) WHERE slug IS NULL;
    ALTER TABLE organizations ALTER COLUMN slug SET NOT NULL;
    ALTER TABLE organizations ADD CONSTRAINT organizations_slug_key UNIQUE (slug);
    ALTER TABLE organizations ADD CONSTRAINT organizations_slug_check CHECK (slug ~ '^[a-z0-9-]+$');
    RAISE NOTICE 'Added slug column to organizations table';
  END IF;
END $$;

${fixedMigration}

-- Clean up
DROP FUNCTION IF EXISTS safe_create_table(text, text);
`;

const migrationPath = path.join(TEMP_DIR, 'smart_migration.sql');
fs.writeFileSync(migrationPath, smartMigrationSQL);
console.log('✅ Smart migration created\n');

// Step 6: Offer options
console.log('6️⃣ What would you like to do?\n');
console.log('   1) Apply the smart migration now');
console.log('   2) Create a new migration file');
console.log('   3) Reset the database (WARNING: Deletes all data)');
console.log('   4) Exit and handle manually\n');

const readline = require('readline');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

rl.question('Enter your choice (1-4): ', (answer) => {
  switch (answer) {
    case '1':
      console.log('\n🚀 Applying smart migration...');
      runCommand(`supabase db push ${migrationPath}`);
      console.log('\n✅ Migration complete!');
      break;
      
    case '2':
      const timestamp = new Date().toISOString().replace(/[^0-9]/g, '').slice(0, 14);
      const newMigrationPath = path.join(MIGRATIONS_DIR, `${timestamp}_fix_schema.sql`);
      fs.copyFileSync(migrationPath, newMigrationPath);
      console.log(`\n✅ Created new migration: ${newMigrationPath}`);
      console.log('   Run: supabase db push to apply');
      break;
      
    case '3':
      console.log('\n⚠️  WARNING: This will delete all data!');
      rl.question('Type "DELETE ALL" to confirm: ', (confirm) => {
        if (confirm === 'DELETE ALL') {
          console.log('\n🗑️  Resetting database...');
          runCommand('supabase db reset');
          console.log('✅ Database reset complete');
        } else {
          console.log('❌ Reset cancelled');
        }
        rl.close();
      });
      return;
      
    case '4':
      console.log(`\n📁 Migration saved to: ${migrationPath}`);
      console.log('   Run manually: supabase db push ' + migrationPath);
      break;
      
    default:
      console.log('\n❌ Invalid choice');
  }
  
  console.log('\n🎯 Next steps:');
  console.log('   1. Check tables: supabase status');
  console.log('   2. View in dashboard: supabase dashboard');
  console.log('   3. Create test data');
  
  rl.close();
});