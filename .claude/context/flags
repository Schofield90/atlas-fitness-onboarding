# Feature Flags - Automations Module

## Environment Configuration

### Development vs Production
**ENV Variable**: NODE_ENV
- Values: development | production | test
- Usage: Component SSR behavior, API error verbosity
- File references: /Users/samschofield/atlas-fitness-onboarding/app/components/automation/DynamicWorkflowBuilder.tsx:26-32

### Feature Toggles

### Workflow Builder Features
**FEATURE_ENHANCED_WORKFLOWS** (implied)
- Status: ACTIVE (inferred from codebase)
- Location: Enhanced workflow builder components exist alongside basic ones
- Impact: Determines which workflow builder components are available

**FEATURE_SIMPLE_WORKFLOW_BUILDER** 
- Status: DEPRECATED 
- Source: /Users/samschofield/atlas-fitness-onboarding/app/components/automation/DynamicWorkflowBuilder.tsx:34-35
- Comment: "DEPRECATED: SimpleWorkflowBuilder is no longer used"
- Impact: All workflow building now uses main WorkflowBuilder component

### Test Mode Features
**TEST_MODE_ENABLED**
- Status: ACTIVE (always available)
- Source: /Users/samschofield/atlas-fitness-onboarding/app/components/automation/WorkflowBuilder.tsx:892-910
- Controls: Test mode toggle in workflow builder toolbar
- Impact: Enables/disables workflow test execution features

### Node Palette Configuration
**NODE_PALETTE_CATEGORIES** (hardcoded configuration)
- Source: /Users/samschofield/atlas-fitness-onboarding/app/components/automation/WorkflowBuilder.tsx:84-250
- Categories: triggers, communication, crm, logic, data
- Status: Static configuration, no feature flagging

### Auto-Save Configuration  
**AUTO_SAVE_ENABLED** (hardcoded)
- Status: ACTIVE
- Interval: 2000ms (2 seconds)
- Source: /Users/samschofield/atlas-fitness-onboarding/app/components/automation/WorkflowBuilder.tsx:534-560
- Impact: Controls automatic workflow saving during editing

## Database Feature Flags

### Workflow Status States
**WORKFLOW_STATUSES**
- Values: 'draft' | 'active' | 'paused' | 'archived'
- Source: /Users/samschofield/atlas-fitness-onboarding/app/lib/types/automation.ts:12
- Impact: Controls workflow lifecycle management

### Node Type Availability
**AVAILABLE_NODE_TYPES** (configuration-driven)
- Basic types: trigger, action, condition, wait, loop, transform, filter
- Advanced types: ai_trigger, smart_condition, ai_action, parallel_processor, etc.
- Source: /Users/samschofield/atlas-fitness-onboarding/app/lib/types/automation.ts:52-74
- Impact: Determines which nodes appear in palette

### Template System
**TEMPLATE_SYSTEM_ENABLED** (inferred as ACTIVE)
- Template categories: lead_nurture, client_onboarding, retention, sales, marketing, operations
- Source: /Users/samschofield/atlas-fitness-onboarding/app/lib/types/automation.ts:249
- Impact: Controls template selection and management features

## Client Configuration Flags

### ReactFlow Configuration
**REACTFLOW_SSR** 
- Status: DISABLED
- Source: /Users/samschofield/atlas-fitness-onboarding/app/components/automation/DynamicWorkflowBuilder.tsx:26-32
- Config: `{ ssr: false, loading: () => <WorkflowBuilderLoading /> }`
- Impact: Prevents server-side rendering of ReactFlow components

### Drag & Drop Backend
**DND_BACKEND**
- Value: HTML5Backend (production), TestBackend (testing)
- Source: /Users/samschofield/atlas-fitness-onboarding/app/components/automation/WorkflowBuilder.tsx:1151-1156
- Impact: Controls drag-and-drop implementation

### Error Handling Mode
**ERROR_FALLBACK_ENABLED**
- Status: ACTIVE
- Behavior: Falls back to sample data when API fails
- Source: /Users/samschofield/atlas-fitness-onboarding/app/automations/page.tsx:66-114
- Impact: Provides demo data when backend is unavailable

## Component-Level Flags

### Configuration Panel Features
**JSON_VIEW_TOGGLE**
- Status: ACTIVE
- Source: /Users/samschofield/atlas-fitness-onboarding/app/components/automation/config/DynamicConfigPanel.tsx:891-896
- Control: Eye/EyeOff button in config panel header
- Impact: Enables raw JSON editing of node configurations

**FIELD_VALIDATION_ENABLED**
- Status: ACTIVE  
- Source: /Users/samschofield/atlas-fitness-onboarding/app/components/automation/config/DynamicConfigPanel.tsx:632-670
- Impact: Real-time form validation with error display

### Builder UI Features
**MINIMAP_ENABLED**
- Status: ACTIVE
- Source: /Users/samschofield/atlas-fitness-onboarding/app/components/automation/WorkflowBuilder.tsx:969-981
- Config: Custom node colors, transparent mask
- Impact: Shows workflow overview in bottom-right corner

**NODE_TOOLBAR_ENABLED**
- Status: ACTIVE  
- Source: /Users/samschofield/atlas-fitness-onboarding/app/components/automation/WorkflowBuilder.tsx:984-1014
- Features: Copy, settings, delete buttons on selected nodes
- Impact: Quick access to node operations

**BACKGROUND_DOTS**
- Status: ACTIVE
- Source: /Users/samschofield/atlas-fitness-onboarding/app/components/automation/WorkflowBuilder.tsx:982
- Config: `BackgroundVariant.Dots, gap={12}, size={1}`
- Impact: Canvas background styling

## Test & Debug Flags

### Test Execution Configuration
**TEST_EXECUTION_DELAY**
- Value: 800ms (hardcoded)
- Source: /Users/samschofield/atlas-fitness-onboarding/app/components/automation/WorkflowBuilder.tsx:726
- Impact: Simulation delay between workflow steps during testing

**TEST_PAYLOAD_DEFAULT** (configuration)
- Default test data provided in test panel
- Source: /Users/samschofield/atlas-fitness-onboarding/app/components/automation/WorkflowBuilder.tsx:1040-1047
- Impact: Starting point for workflow testing

### Debug Features
**VERBOSE_LOGGING** (implied from console.log statements)
- Status: ACTIVE in development
- Locations: Drop handlers, node creation, execution steps
- Impact: Console debugging information during development

## API Feature Flags

### Organization Isolation
**MULTI_TENANT_ENABLED**
- Status: ACTIVE
- Enforcement: getCurrentUserOrganization() in all endpoints
- Source: /Users/samschofield/atlas-fitness-onboarding/app/api/automations/workflows/route.ts:7-10
- Impact: Enforces organization-scoped data access

### Error Response Mode
**DETAILED_ERRORS** (environment-dependent)
- Development: Detailed error messages and stack traces
- Production: Generic error messages for security
- Source: Error handling patterns in API routes

## Configuration Management

### Static Configuration
- Node types and categories: Hardcoded in component files
- Template definitions: Hardcoded in template components
- Validation rules: Hardcoded in configuration panels

### Runtime Configuration  
- Organization settings: Loaded from database
- User preferences: Stored in local storage (implied)
- Workflow settings: Stored with workflow data

### Missing Configuration System
- No centralized feature flag management
- No A/B testing framework
- No dynamic configuration updates
- No role-based feature access

## Recommendations for Flag Management

### Centralized Flag System
- Implement feature flag service/context
- Environment-based flag overrides
- Database-stored organizational flags
- Runtime flag updates without deployment

### Role-Based Access
- Premium features for paid plans
- Staff vs admin feature access
- Organization-level feature toggles

### Performance Flags
- Disable auto-save for large workflows
- Reduce update frequency on slow connections
- Optional features for mobile devices

## Leads & Contacts Module Flags

### Core Feature Flags

### contactsExportFeedback
**Status**: ACTIVE (true in feature-flags.ts)
- Source: /Users/samschofield/atlas-fitness-onboarding/app/lib/feature-flags.ts:94
- Purpose: Controls export feedback toasts and comprehensive export functionality
- Usage: /Users/samschofield/atlas-fitness-onboarding/app/customers/page.tsx:188
- Impact: When enabled, shows toast notifications and exports detailed customer data

### conversationsNewButton  
**Status**: ACTIVE (true in feature-flags.ts)
- Source: /Users/samschofield/atlas-fitness-onboarding/app/lib/feature-flags.ts:93
- Purpose: Enable/disable New button based on contacts availability
- Relationship: Connected to contacts functionality

### Export System Flags

**CLIENT_SIDE_EXPORT**
- Status: ACTIVE (current implementation)
- Location: /Users/samschofield/atlas-fitness-onboarding/app/leads/page.tsx:48-130
- Purpose: Client-side CSV generation and download
- Performance: Suitable for small datasets, may need server-side for large exports

**COMPREHENSIVE_EXPORT_DATA**
- Status: CONDITIONAL (based on contactsExportFeedback flag)
- Includes: Emergency contacts, medical info, membership details, activity history
- Location: /Users/samschofield/atlas-fitness-onboarding/app/customers/page.tsx:216-280

### Import System Flags

**BULK_IMPORT_ENABLED**
- Status: UI IMPLEMENTED, BACKEND MISSING
- Component: /Users/samschofield/atlas-fitness-onboarding/app/components/leads/BulkImportModal.tsx
- Backend: /api/v2/leads/import endpoint not implemented
- Features: CSV/Excel upload, field mapping, duplicate handling options

**IMPORT_FIELD_MAPPING**
- Status: ACTIVE
- Features: Auto-mapping of common fields, manual mapping interface
- Supported Formats: CSV, XLSX, XLS files
- Validation: Required fields (name, email), optional fields mapping

### Lead Management Flags

**LEAD_SCORING_ENABLED**
- Status: ACTIVE (implemented)
- Components: LeadScoringBadge, LeadScoringBreakdown, LeadScoringDashboard
- Algorithm: Activity-based scoring (0-100 scale)
- UI: Temperature indicators (hot/warm/lukewarm/cold)

**LEAD_ACTIVITIES_TRACKING**
- Status: PARTIALLY IMPLEMENTED
- Frontend: Activity recording buttons in LeadsTable
- Backend: API endpoint referenced but may be missing
- Types: email_open, website_visit, call, meeting, note, status_change

**LEAD_FILTERING_ADVANCED**
- Status: ACTIVE
- Features: Status filter, temperature filter, search, sorting
- Location: /Users/samschofield/atlas-fitness-onboarding/app/components/leads/LeadsTable.tsx:120-163
- Filters: All, Hot, Warm, Lukewarm, Cold temperature classifications

### Contacts Unification Flags

**UNIFIED_CONTACTS_VIEW** 
- Status: PARTIAL (conceptual in UI, not implemented)
- Current: Separate leads and customers pages
- Goal: Unified view of all contacts (leads + clients)
- Challenge: Different table schemas (leads vs clients)

**LEAD_TO_CUSTOMER_CONVERSION**
- Status: MISSING IMPLEMENTATION
- Current: Manual process or separate creation
- Needed: API endpoint for lead → client conversion
- Workflow: Qualified leads should convert to paying customers

### Data Isolation Flags

**ORGANIZATION_SCOPED_DATA**
- Status: ACTIVE (enforced)
- Implementation: organization_id in all tables with RLS policies
- Pattern: get_user_organization_id() function in database policies
- API: requireAuth() helper ensures organization context

**MULTI_TENANT_CACHING**
- Status: ACTIVE
- Pattern: Cache keys include organization_id
- Duration: 5-minute cache for lead lists (CACHE_TTL.LEAD_LISTS)
- Invalidation: Organization-specific cache clearing

### Contact Communication Flags

**MESSAGING_INTEGRATION**
- Status: ACTIVE
- Component: MessageComposer modal for leads
- Channels: Email, SMS, WhatsApp integration
- Location: /Users/samschofield/atlas-fitness-onboarding/app/components/messaging/MessageComposer.tsx

**CALL_TRACKING_ENABLED**
- Status: ACTIVE (referenced)
- Components: PhoneCallButton integration
- Purpose: Track phone calls as lead activities
- Integration: Twilio voice calling system

### Missing Feature Flags (Should be implemented)

**CONTACTS_MERGE_DUPLICATES**
- Status: NOT IMPLEMENTED
- Purpose: Identify and merge duplicate contacts across leads/customers
- Needed For: Data quality management

**LEAD_ASSIGNMENT_ENABLED**
- Status: NOT IMPLEMENTED  
- Purpose: Assign leads to specific staff members
- Current: No assignment functionality in UI or API

**ADVANCED_LEAD_SEGMENTATION**
- Status: NOT IMPLEMENTED
- Purpose: Create custom segments based on behavior, demographics
- Current: Basic filtering only

**CONTACT_CUSTOM_FIELDS**
- Status: LIMITED IMPLEMENTATION
- Current: Fixed schema fields only
- Needed: Dynamic custom fields for organizations

## Configuration Patterns

### Feature Flag Usage Pattern
```typescript
import { isFeatureEnabled } from '@/app/lib/feature-flags'

if (!isFeatureEnabled('contactsExportFeedback')) {
  // Fallback behavior
  alert('Export not available yet - please contact support')
  return
}
```

### Environment-Based Overrides
```typescript
// Development shows all features but may disable actions
if (process.env.NODE_ENV === 'development') {
  overrides.campaigns = true  // Show but limit functionality
}
```

### Component-Level Flags
- contactsExportFeedback: Controls toast notifications and detailed export
- conversationsNewButton: Gates conversation creation based on contact availability
- Bulk operations: UI exists but backend implementation flags needed

## Recommendations

### Add Missing Flags
1. `leadsImportEnabled` - Control import functionality availability
2. `leadConversionEnabled` - Control lead-to-customer conversion
3. `contactsUnificationEnabled` - Control unified contacts view
4. `advancedLeadScoringEnabled` - Control AI-powered scoring features
5. `bulkOperationsEnabled` - Control bulk update/delete operations

### Performance Flags  
1. `serverSideExportEnabled` - Switch between client/server export
2. `leadPaginationSize` - Configure pagination limits
3. `realTimeUpdatesEnabled` - Control live updates vs refresh

### Role-Based Flags
1. `leadExportPermission` - Role-based export access
2. `leadDeletePermission` - Role-based delete access  
3. `bulkOperationsPermission` - Role-based bulk operations

Last updated: 2025-08-30T00:00:00Z