name: "Slack: Vercel preview link"

on:
  check_run:
    types: [completed]   # fires when Vercel check finishes

jobs:
  post-preview-url:
    # Only when the "Vercel" check succeeds (GitHub App name is "Vercel")
    if: ${{ github.event.check_run.name == 'Vercel' && github.event.check_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Find preview URL via GitHub Deployments
        id: find
        uses: actions/github-script@v7
        with:
          script: |
            const { github, context, core } = require('@actions/github');
            const { owner, repo } = context.repo;
            const cr = context.payload.check_run;
            const sha = cr.head_sha;
            const prNum = (cr.pull_requests && cr.pull_requests[0] && cr.pull_requests[0].number) || '';
            // List deployments for this SHA (Vercel registers these)
            const deployments = await github.paginate(github.rest.repos.listDeployments, { owner, repo, sha });
            for (const dep of deployments) {
              const { data: statuses } = await github.rest.repos.listDeploymentStatuses({
                owner, repo, deployment_id: dep.id
              });
              // Look for a successful status with an environment_url (Vercel preview)
              const hit = statuses.find(s => s.state === 'success' && s.environment_url);
              if (hit) {
                core.setOutput('url', hit.environment_url);
                core.setOutput('pr', prNum);
                core.setOutput('branch', dep.ref || cr.check_suite?.head_branch || '');
                return;
              }
            }
            core.setFailed('No Vercel environment_url found for this check_run');

      - name: Post link to Slack
        env:
          SLACK_USER_TOKEN: ${{ secrets.SLACK_USER_TOKEN }}     # xoxp- user token (chat:write)
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID_TESTS }}  # or a dedicated channel
          URL:    ${{ steps.find.outputs.url }}
          PR:     ${{ steps.find.outputs.pr }}
          BRANCH: ${{ steps.find.outputs.branch }}
        run: |
          set -euo pipefail
          if [ -z "$URL" ]; then echo "No URL to post"; exit 0; fi
          TEXT="Vercel preview for PR #${PR} (${BRANCH}): ${URL}"
          read -r -d '' PAYLOAD <<'JSON' || true
          {
            "channel": "'"$SLACK_CHANNEL_ID"'",
            "text": "'"$TEXT"'",
            "link_names": true,
            "unfurl_links": false
          }
          JSON
          curl -sS -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer $SLACK_USER_TOKEN" \
            -H "Content-type: application/json; charset=utf-8" \
            --data "$PAYLOAD"
