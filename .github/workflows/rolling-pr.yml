name: Rolling PR maintainer

on:
  push:
    branches:
      - cursor/rolling-fixes
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  ensure-rolling-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure jq is installed
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Create or update rolling PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          owner="${REPO%%/*}"
          repo="${REPO##*/}"
          head="cursor/rolling-fixes"
          base="main"
          title="chore: rolling Cursor fixes"
          ciLink="https://github.com/${owner}/${repo}/actions?query=branch%3A${head}"
          body=$(cat <<'BODY'
          Rolling PR to accumulate small Cursor-driven fixes.

          - Vercel preview: TBD
          - Latest CI run: CI_LINK

          Running checklist:
          - [x] Initialize rolling PR

          Manual review notes:
          - N/A
          BODY
          )
          body=${body/CI_LINK/${ciLink}}

          # Find existing PR
          existing=$(curl -s -H "Authorization: token ${GH_TOKEN}" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${owner}/${repo}/pulls?state=open&head=${owner}:${head}&base=${base}")
          number=$(echo "$existing" | jq -r '.[0].number // empty')

          if [ -n "${number}" ]; then
            data=$(jq -n --arg title "$title" --arg body "$body" '{title:$title, body:$body}')
            code=$(curl -s -o /tmp/pr_resp.json -w "%{http_code}" -X PATCH \
              -H "Authorization: token ${GH_TOKEN}" -H "Accept: application/vnd.github+json" \
              -d "$data" \
              "https://api.github.com/repos/${owner}/${repo}/pulls/${number}")
            if [ "$code" -lt 200 ] || [ "$code" -ge 300 ]; then
              echo "Update PR failed ($code):"; cat /tmp/pr_resp.json; exit 1
            fi
          else
            data=$(jq -n --arg title "$title" --arg head "$head" --arg base "$base" --arg body "$body" '{title:$title, head:$head, base:$base, body:$body, draft:false}')
            code=$(curl -s -o /tmp/pr_resp.json -w "%{http_code}" -X POST \
              -H "Authorization: token ${GH_TOKEN}" -H "Accept: application/vnd.github+json" \
              -d "$data" \
              "https://api.github.com/repos/${owner}/${repo}/pulls")
            if [ "$code" -lt 200 ] || [ "$code" -ge 300 ]; then
              echo "Create PR failed ($code):"; cat /tmp/pr_resp.json; exit 1
            fi
          fi
