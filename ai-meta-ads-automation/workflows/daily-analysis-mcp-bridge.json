{
  "name": "Daily Meta Ads Analysis (MCP Bridge)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 9 * * *"
            }
          ]
        }
      },
      "name": "Daily Schedule (9 AM)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "url": "http://localhost:3000/mcp",
        "method": "POST",
        "headers": {
          "Content-Type": "application/json",
          "X-Request-ID": "={{$node.uuid()}}"
        },
        "body": {
          "action": "get_all_ad_accounts",
          "request_id": "={{$node.uuid()}}",
          "limit": 25
        },
        "options": {
          "timeout": 30000,
          "redirect": {
            "follow": true,
            "maxRedirects": 3
          }
        }
      },
      "name": "Get All Ad Accounts (HTTP)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        900,
        300
      ],
      "id": "get-accounts"
    },
    {
      "parameters": {
        "functionCode": "// Initialize arrays to store all data\nconst allAccountsData = [];\nconst processedAccounts = [];\n\n// Get configuration\nconst config = require('./config/thresholds');\nconst MetaDataProcessor = require('./lib/meta-data-processor');\nconst processor = new MetaDataProcessor();\n\n// Process each ad account\nfor (const account of $input.all()) {\n  const accountId = account.json.id;\n  const accountName = account.json.name;\n  \n  // Store account info for parallel processing\n  allAccountsData.push({\n    id: accountId,\n    name: accountName,\n    originalData: account.json\n  });\n}\n\n// Return account data for parallel processing\nreturn allAccountsData.map(account => ({ json: account }));"
      },
      "name": "Process Account List",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "url": "http://localhost:3000/mcp",
        "method": "POST",
        "headers": {
          "Content-Type": "application/json",
          "X-Request-ID": "={{$node.uuid()}}"
        },
        "body": {
          "action": "get_campaign_insights",
          "request_id": "={{$node.uuid()}}",
          "account_id": "={{$json.account_id}}",
          "time_ranges": [
            "yesterday"
          ],
          "level": "campaign"
        },
        "options": {
          "timeout": 30000,
          "redirect": {
            "follow": true,
            "maxRedirects": 3
          }
        }
      },
      "name": "Get Yesterday Insights (HTTP)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        900,
        300
      ],
      "id": "get-yesterday"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/mcp",
        "method": "POST",
        "headers": {
          "Content-Type": "application/json",
          "X-Request-ID": "={{$node.uuid()}}"
        },
        "body": {
          "action": "get_campaign_insights",
          "request_id": "={{$node.uuid()}}",
          "account_id": "={{$json.account_id}}",
          "time_ranges": [
            "last_3d"
          ],
          "level": "campaign"
        },
        "options": {
          "timeout": 30000,
          "redirect": {
            "follow": true,
            "maxRedirects": 3
          }
        }
      },
      "name": "Get Last 3 Days Insights (HTTP)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        900,
        300
      ],
      "id": "get-3days"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/mcp",
        "method": "POST",
        "headers": {
          "Content-Type": "application/json",
          "X-Request-ID": "={{$node.uuid()}}"
        },
        "body": {
          "action": "get_campaign_insights",
          "request_id": "={{$node.uuid()}}",
          "account_id": "={{$json.account_id}}",
          "time_ranges": [
            "last_5d"
          ],
          "level": "campaign"
        },
        "options": {
          "timeout": 30000,
          "redirect": {
            "follow": true,
            "maxRedirects": 3
          }
        }
      },
      "name": "Get Last 5 Days Insights (HTTP)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        900,
        300
      ],
      "id": "get-5days"
    },
    {
      "parameters": {
        "functionCode": "\n// Process MCP Bridge responses\nconst allResponses = $input.all();\nconst processedData = {\n  accounts: [],\n  summary: {\n    totalAccounts: 0,\n    totalSpend: 0,\n    totalLeads: 0,\n    averageCPL: 0,\n    criticalAccounts: 0,\n    warningAccounts: 0,\n    healthyAccounts: 0\n  }\n};\n\n// Process each response\nallResponses.forEach(response => {\n  const data = response.json;\n  \n  if (data.success && data.insights) {\n    // Process campaign insights\n    Object.keys(data.insights).forEach(timeRange => {\n      const insight = data.insights[timeRange];\n      \n      if (insight.campaigns) {\n        processedData.accounts.push({\n          id: data.account_id,\n          name: insight.account_name || data.account_id,\n          campaigns: insight.campaigns,\n          metrics: insight.account_metrics,\n          timeRange: timeRange\n        });\n      }\n    });\n  }\n  \n  if (data.success && data.accounts) {\n    // Process ad accounts\n    data.accounts.forEach(account => {\n      processedData.summary.totalAccounts++;\n    });\n  }\n});\n\n// Calculate summary\nif (processedData.accounts.length > 0) {\n  processedData.summary.totalSpend = processedData.accounts.reduce((sum, acc) => \n    sum + (acc.metrics?.totalSpend || 0), 0);\n  processedData.summary.totalLeads = processedData.accounts.reduce((sum, acc) => \n    sum + (acc.metrics?.totalLeads || 0), 0);\n  processedData.summary.averageCPL = processedData.summary.totalLeads > 0 ? \n    processedData.summary.totalSpend / processedData.summary.totalLeads : 0;\n}\n\nreturn [{ json: { processedData } }];\n          "
      },
      "name": "Process MCP Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1120,
        300
      ],
      "id": "process-data"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/mcp",
        "method": "POST",
        "headers": {
          "Content-Type": "application/json",
          "X-Request-ID": "={{$node.uuid()}}"
        },
        "body": {
          "action": "generate_ai_analysis",
          "request_id": "={{$node.uuid()}}",
          "performance_data": "={{$json.processedData}}",
          "analysis_type": "daily",
          "context": {
            "business_type": "gym",
            "target_market": "uk"
          }
        },
        "options": {
          "timeout": 30000,
          "redirect": {
            "follow": true,
            "maxRedirects": 3
          }
        }
      },
      "name": "Generate AI Analysis (HTTP)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        900,
        300
      ],
      "id": "ai-analysis"
    },
    {
      "parameters": {
        "functionCode": "// Import report formatter\nconst ReportFormatter = require('./lib/report-formatter');\nconst formatter = new ReportFormatter();\n\n// Get analysis data\nconst analysisData = $input.first().json;\n\n// Format daily report\nconst dailyReport = formatter.formatDailyReport(analysisData);\n\n// Return formatted report\nreturn [{\n  json: {\n    ...analysisData,\n    emailReport: dailyReport\n  }\n}];"
      },
      "name": "Format Daily Report",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "smtp",
        "fromEmail": "={{$json.emailReport.from || 'alerts@meta-ads-automation.com'}}",
        "toEmail": "={{$json.emailReport.to || 'sam@atlas-gyms.co.uk'}}",
        "subject": "={{$json.emailReport.subject}}",
        "emailType": "html",
        "message": "={{$json.emailReport.html}}",
        "ccEmail": "={{$json.emailReport.cc || ''}}",
        "bccEmail": "={{$json.emailReport.bcc || ''}}"
      },
      "name": "Send Email Report",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        1780,
        200
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "telegramApi",
        "resource": "message",
        "operation": "sendMessage",
        "chatId": "={{$env.TELEGRAM_CHAT_ID}}",
        "text": "üìä *Daily Meta Ads Summary*\\n\\nüí∞ Total Spend: ¬£{{$json.summary.totalSpend}}\\nüéØ Total Leads: {{$json.summary.totalLeads}}\\nüí∏ Average CPL: ¬£{{$json.summary.averageCPL}}\\nüè• Overall Health: {{$json.summary.overallHealth}}\\n\\nüî• Critical: {{$json.summary.criticalAccounts}} accounts\\n‚ö†Ô∏è Warning: {{$json.summary.warningAccounts}} accounts\\n‚úÖ Healthy: {{$json.summary.healthyAccounts}} accounts\\n\\nüìà Full report sent via email\\n\\n_{{$json.timestamp}}_",
        "parseMode": "Markdown"
      },
      "name": "Send Telegram Summary",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1780,
        400
      ]
    },
    {
      "parameters": {
        "functionCode": "// Store daily results for historical tracking\nconst fs = require('fs');\nconst path = require('path');\n\n// Get analysis data\nconst analysisData = $input.first().json;\n\n// Create storage directory if it doesn't exist\nconst storageDir = './storage/daily-reports';\nif (!fs.existsSync(storageDir)) {\n  fs.mkdirSync(storageDir, { recursive: true });\n}\n\n// Generate filename with date\nconst today = new Date().toISOString().split('T')[0];\nconst filename = `daily-report-${today}.json`;\nconst filepath = path.join(storageDir, filename);\n\n// Save report data\ntry {\n  fs.writeFileSync(filepath, JSON.stringify(analysisData, null, 2));\n  console.log(`Daily report saved to ${filepath}`);\n} catch (error) {\n  console.error('Error saving daily report:', error);\n}\n\n// Clean up old reports (keep last 90 days)\nconst retentionDays = 90;\nconst cutoffDate = new Date();\ncutoffDate.setDate(cutoffDate.getDate() - retentionDays);\n\ntry {\n  const files = fs.readdirSync(storageDir);\n  files.forEach(file => {\n    if (file.startsWith('daily-report-')) {\n      const filePath = path.join(storageDir, file);\n      const stats = fs.statSync(filePath);\n      if (stats.mtime < cutoffDate) {\n        fs.unlinkSync(filePath);\n        console.log(`Deleted old report: ${file}`);\n      }\n    }\n  });\n} catch (error) {\n  console.error('Error cleaning up old reports:', error);\n}\n\n// Return success status\nreturn [{\n  json: {\n    success: true,\n    message: 'Daily analysis completed successfully',\n    timestamp: new Date().toISOString(),\n    accountsProcessed: analysisData.accounts.length,\n    totalSpend: analysisData.summary.totalSpend,\n    totalLeads: analysisData.summary.totalLeads,\n    averageCPL: analysisData.summary.averageCPL,\n    overallHealth: analysisData.summary.overallHealth\n  }\n}];"
      },
      "name": "Store Results & Cleanup",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2000,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Error handling and logging\nconst error = $input.first().json.error;\nconst context = $input.first().json.context || 'Unknown';\n\nconsole.error(`Daily analysis error in ${context}:`, error);\n\n// Send error notification to Telegram\nconst errorMessage = `üö® *Daily Analysis Error*\\n\\nContext: ${context}\\nError: ${error.message || error}\\n\\nTime: ${new Date().toLocaleString('en-GB')}\\n\\n_Check logs for full details_`;\n\nreturn [{\n  json: {\n    chatId: process.env.TELEGRAM_CHAT_ID,\n    text: errorMessage,\n    parseMode: 'Markdown'\n  }\n}];"
      },
      "name": "Error Handler",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1340,
        500
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "telegramApi",
        "resource": "message",
        "operation": "sendMessage",
        "chatId": "={{$json.chatId}}",
        "text": "={{$json.text}}",
        "parseMode": "={{$json.parseMode}}"
      },
      "name": "Send Error Alert",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1560,
        500
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{$json.summary.criticalAccounts}}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "or"
        }
      },
      "name": "Check for Critical Issues",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1560,
        100
      ]
    },
    {
      "parameters": {
        "functionCode": "// Send immediate alert for critical issues found during daily analysis\nconst analysisData = $input.first().json;\nconst { accounts, summary } = analysisData;\n\n// Find accounts with critical issues\nconst criticalAccounts = accounts.filter(account => \n  account.campaigns.some(campaign => campaign.severity === 'critical')\n);\n\n// Format critical issue alert\nconst criticalCampaigns = criticalAccounts.flatMap(account => \n  account.campaigns.filter(campaign => campaign.severity === 'critical')\n);\n\nconst alertMessage = `üö® *CRITICAL ISSUES DETECTED*\\n\\nDaily analysis found ${criticalCampaigns.length} critical campaigns:\\n\\n${criticalCampaigns.slice(0, 5).map(campaign => \n  `‚Ä¢ ${campaign.campaignName}\\n  ¬£${campaign.costPerLead} CPL | ${campaign.leads} leads | ¬£${campaign.spend} spend`\n).join('\\n\\n')}\\n\\n‚ö†Ô∏è Immediate action required!\\n\\n_Full report sent via email_`;\n\nreturn [{\n  json: {\n    chatId: process.env.TELEGRAM_CHAT_ID,\n    text: alertMessage,\n    parseMode: 'Markdown'\n  }\n}];"
      },
      "name": "Format Critical Alert",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1780,
        100
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "telegramApi",
        "resource": "message",
        "operation": "sendMessage",
        "chatId": "={{$json.chatId}}",
        "text": "={{$json.text}}",
        "parseMode": "={{$json.parseMode}}"
      },
      "name": "Send Critical Alert",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        2000,
        100
      ]
    }
  ],
  "connections": {
    "Daily Schedule (9 AM)": {
      "main": [
        [
          {
            "node": "Get All Ad Accounts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Ad Accounts": {
      "main": [
        [
          {
            "node": "Process Account List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Account List": {
      "main": [
        [
          {
            "node": "Get Yesterday Insights",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Last 3 Days Insights",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Last 5 Days Insights",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Yesterday Insights": {
      "main": [
        [
          {
            "node": "Process Campaign Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Last 3 Days Insights": {
      "main": [
        [
          {
            "node": "Process Campaign Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Last 5 Days Insights": {
      "main": [
        [
          {
            "node": "Process Campaign Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Campaign Data": {
      "main": [
        [
          {
            "node": "Generate AI Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Analysis": {
      "main": [
        [
          {
            "node": "Format Daily Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Daily Report": {
      "main": [
        [
          {
            "node": "Send Email Report",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Telegram Summary",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check for Critical Issues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email Report": {
      "main": [
        [
          {
            "node": "Store Results & Cleanup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Telegram Summary": {
      "main": [
        [
          {
            "node": "Store Results & Cleanup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Send Error Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Critical Issues": {
      "main": [
        [
          {
            "node": "Format Critical Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Critical Alert": {
      "main": [
        [
          {
            "node": "Send Critical Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "Error Handler"
  },
  "staticData": {},
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": [
    {
      "createdAt": "2025-07-15T10:00:00.000Z",
      "updatedAt": "2025-07-15T10:00:00.000Z",
      "id": "1",
      "name": "Meta Ads Automation"
    }
  ]
}