import { NextRequest, NextResponse } from 'next/server'
import { requireAuth, createOrgScopedClient, verifyResourceOwnership } from '@/lib/auth-middleware'

export async function GET(request: NextRequest) {
  // 1. Check authentication
  const auth = await requireAuth(request)
  if (auth instanceof NextResponse) return auth
  
  // 2. Create organization-scoped Supabase client
  const supabase = createOrgScopedClient(auth.organizationId)
  
  try {
    // 3. Query with automatic organization filtering
    const { data: leads, error } = await supabase
      .from('leads')
      .select('*') // Automatically filtered by organization_id
      .order('created_at', { ascending: false })
      .limit(10)
    
    if (error) throw error
    
    return NextResponse.json({ leads })
  } catch (error) {
    console.error('Error fetching leads:', error)
    return NextResponse.json(
      { error: 'Failed to fetch leads' },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  // 1. Check authentication
  const auth = await requireAuth(request)
  if (auth instanceof NextResponse) return auth
  
  // 2. Create organization-scoped Supabase client
  const supabase = createOrgScopedClient(auth.organizationId)
  
  try {
    const body = await request.json()
    
    // 3. Insert with automatic organization_id
    const { data: lead, error } = await supabase
      .from('leads')
      .insert({
        name: body.name,
        email: body.email,
        phone: body.phone,
        // organization_id is automatically added
      })
      .select()
      .single()
    
    if (error) throw error
    
    return NextResponse.json({ lead })
  } catch (error) {
    console.error('Error creating lead:', error)
    return NextResponse.json(
      { error: 'Failed to create lead' },
      { status: 500 }
    )
  }
}

export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  // 1. Check authentication
  const auth = await requireAuth(request)
  if (auth instanceof NextResponse) return auth
  
  // 2. Verify resource ownership
  const hasAccess = await verifyResourceOwnership('leads', params.id, auth.organizationId)
  if (!hasAccess) {
    return NextResponse.json(
      { error: 'Resource not found or access denied' },
      { status: 404 }
    )
  }
  
  // 3. Create organization-scoped Supabase client
  const supabase = createOrgScopedClient(auth.organizationId)
  
  try {
    const body = await request.json()
    
    // 4. Update with automatic organization filtering
    const { data: lead, error } = await supabase
      .from('leads')
      .update(body)
      .eq('id', params.id) // Organization filter is automatically added
      .select()
      .single()
    
    if (error) throw error
    
    return NextResponse.json({ lead })
  } catch (error) {
    console.error('Error updating lead:', error)
    return NextResponse.json(
      { error: 'Failed to update lead' },
      { status: 500 }
    )
  }
}
