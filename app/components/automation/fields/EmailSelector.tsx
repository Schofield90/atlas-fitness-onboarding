'use client'

import { useState, useEffect } from 'react'
import { Search, Plus, Eye, Edit, Sparkles, Mail, FileText, Wand2 } from 'lucide-react'

interface EmailTemplate {
  id: string
  name: string
  subject: string
  content: string
  category: 'welcome' | 'follow_up' | 'nurture' | 'promotional' | 'transactional'
  isAIGenerated?: boolean
  personalizationLevel: 'none' | 'basic' | 'advanced' | 'deep'
  performance?: {
    openRate: number
    clickRate: number
    conversationRate: number
  }
}

interface EmailSelectorProps {
  value?: string | EmailTemplate
  onChange: (template: EmailTemplate | null) => void
  aiAssistance?: boolean
  organizationId: string
  context?: {
    trigger?: string
    leadData?: Record<string, any>
    workflowType?: string
  }
}

export function EmailSelector({
  value,
  onChange,
  aiAssistance = true,
  organizationId,
  context
}: EmailSelectorProps) {
  const [templates, setTemplates] = useState<EmailTemplate[]>([])
  const [selectedTemplate, setSelectedTemplate] = useState<EmailTemplate | null>(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [showPreview, setShowPreview] = useState(false)
  const [isGeneratingAI, setIsGeneratingAI] = useState(false)
  const [activeTab, setActiveTab] = useState<'existing' | 'ai_generate' | 'create'>('existing')
  const [aiPrompt, setAIPrompt] = useState('')

  useEffect(() => {
    loadEmailTemplates()
  }, [organizationId])

  useEffect(() => {
    if (typeof value === 'object' && value) {
      setSelectedTemplate(value)
    } else if (typeof value === 'string') {
      const template = templates.find(t => t.id === value)
      setSelectedTemplate(template || null)
    }
  }, [value, templates])

  const loadEmailTemplates = async () => {
    try {
      // Mock data - would be replaced with actual API call
      const mockTemplates: EmailTemplate[] = [
        {
          id: '1',
          name: 'Welcome New Lead',
          subject: 'Welcome to {{company_name}}! Let\'s get started',
          content: 'Hi {{first_name}},\n\nThank you for your interest in our fitness programs...',
          category: 'welcome',
          personalizationLevel: 'basic',
          performance: { openRate: 0.68, clickRate: 0.12, conversationRate: 0.08 }
        },
        {
          id: '2', 
          name: 'Follow-up Email',
          subject: '{{first_name}}, ready to take the next step?',
          content: 'Hi {{first_name}},\n\nI wanted to follow up on your interest in our {{program_type}} program...',
          category: 'follow_up',
          personalizationLevel: 'advanced',
          performance: { openRate: 0.72, clickRate: 0.18, conversationRate: 0.11 }
        },
        {
          id: '3',
          name: 'AI-Generated Nurture',
          subject: 'Your personalized fitness journey awaits',
          content: 'This content was generated by AI based on lead scoring and behavior patterns...',
          category: 'nurture',
          isAIGenerated: true,
          personalizationLevel: 'deep',
          performance: { openRate: 0.75, clickRate: 0.22, conversationRate: 0.15 }
        }
      ]
      setTemplates(mockTemplates)
    } catch (error) {
      console.error('Failed to load email templates:', error)
    }
  }

  const filteredTemplates = templates.filter(template =>
    template.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    template.subject.toLowerCase().includes(searchQuery.toLowerCase()) ||
    template.category.toLowerCase().includes(searchQuery.toLowerCase())
  )

  const handleTemplateSelect = (template: EmailTemplate) => {
    setSelectedTemplate(template)
    onChange(template)
  }

  const generateAITemplate = async () => {
    if (!aiPrompt.trim()) return
    
    setIsGeneratingAI(true)
    try {
      // Mock AI generation - would be replaced with actual API call
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      const aiTemplate: EmailTemplate = {
        id: `ai_${Date.now()}`,
        name: 'AI Generated Email',
        subject: `${aiPrompt} - Personalized for {{first_name}}`,
        content: `AI generated content based on: "${aiPrompt}"\n\nHi {{first_name}},\n\nBased on your recent interest in fitness and our analysis of similar leads, I've crafted this personalized message just for you...\n\nThis email adapts to your specific interests: {{lead_interests}}\nYour fitness goals: {{fitness_goals}}\nPreferred communication style: {{communication_preference}}`,
        category: 'nurture',
        isAIGenerated: true,
        personalizationLevel: 'deep'
      }
      
      setTemplates(prev => [aiTemplate, ...prev])
      handleTemplateSelect(aiTemplate)
      setAIPrompt('')
      setActiveTab('existing')
    } catch (error) {
      console.error('AI generation failed:', error)
    } finally {
      setIsGeneratingAI(false)
    }
  }

  const getPersonalizationBadge = (level: string) => {
    const config = {
      none: { color: 'bg-gray-100 text-gray-700', label: 'Static' },
      basic: { color: 'bg-blue-100 text-blue-700', label: 'Basic' },
      advanced: { color: 'bg-purple-100 text-purple-700', label: 'Advanced' },
      deep: { color: 'bg-pink-100 text-pink-700', label: 'Deep AI' }
    }
    const { color, label } = config[level as keyof typeof config] || config.none
    
    return (
      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${color}`}>
        {level === 'deep' && <Sparkles className="w-3 h-3 mr-1" />}
        {label}
      </span>
    )
  }

  const getCategoryIcon = (category: string) => {
    const icons = {
      welcome: 'ðŸ‘‹',
      follow_up: 'ðŸ“ž', 
      nurture: 'ðŸŒ±',
      promotional: 'ðŸŽ¯',
      transactional: 'ðŸ“„'
    }
    return icons[category as keyof typeof icons] || 'ðŸ“§'
  }

  return (
    <div className="space-y-4">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Mail className="w-5 h-5 text-gray-600" />
          <h3 className="text-lg font-medium text-gray-900">Email Template</h3>
          {aiAssistance && (
            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gradient-to-r from-purple-100 to-pink-100 text-purple-700">
              <Sparkles className="w-3 h-3 mr-1" />
              AI Enhanced
            </span>
          )}
        </div>
        {selectedTemplate && (
          <button
            onClick={() => setShowPreview(!showPreview)}
            className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            <Eye className="w-4 h-4 mr-2" />
            Preview
          </button>
        )}
      </div>

      {/* Tab Navigation */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8" aria-label="Tabs">
          {[
            { id: 'existing', label: 'Existing Templates', icon: FileText },
            { id: 'ai_generate', label: 'AI Generate', icon: Wand2 },
            { id: 'create', label: 'Create New', icon: Plus }
          ].map(({ id, label, icon: Icon }) => (
            <button
              key={id}
              onClick={() => setActiveTab(id as any)}
              className={`${
                activeTab === id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              } whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm flex items-center`}
            >
              <Icon className="w-4 h-4 mr-2" />
              {label}
            </button>
          ))}
        </nav>
      </div>

      {/* Content */}
      {activeTab === 'existing' && (
        <div className="space-y-4">
          {/* Search */}
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
              placeholder="Search templates..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>

          {/* Templates List */}
          <div className="max-h-96 overflow-y-auto space-y-3">
            {filteredTemplates.map((template) => (
              <div
                key={template.id}
                className={`p-4 rounded-lg border cursor-pointer transition-all ${
                  selectedTemplate?.id === template.id
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                }`}
                onClick={() => handleTemplateSelect(template)}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <span className="text-lg">{getCategoryIcon(template.category)}</span>
                      <h4 className="font-medium text-gray-900">{template.name}</h4>
                      {template.isAIGenerated && (
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gradient-to-r from-purple-100 to-pink-100 text-purple-700">
                          <Sparkles className="w-3 h-3 mr-1" />
                          AI
                        </span>
                      )}
                    </div>
                    <p className="text-sm text-gray-600 mb-2">{template.subject}</p>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        {getPersonalizationBadge(template.personalizationLevel)}
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-700">
                          {template.category}
                        </span>
                      </div>
                      {template.performance && (
                        <div className="flex items-center space-x-4 text-sm text-gray-500">
                          <span>Open: {Math.round(template.performance.openRate * 100)}%</span>
                          <span>Click: {Math.round(template.performance.clickRate * 100)}%</span>
                          <span>Conv: {Math.round(template.performance.conversationRate * 100)}%</span>
                        </div>
                      )}
                    </div>
                  </div>
                  <button className="ml-4 text-gray-400 hover:text-gray-600">
                    <Edit className="w-4 h-4" />
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {activeTab === 'ai_generate' && (
        <div className="space-y-4">
          <div className="bg-gradient-to-r from-purple-50 to-pink-50 p-4 rounded-lg border border-purple-200">
            <div className="flex items-center mb-2">
              <Sparkles className="w-5 h-5 text-purple-600 mr-2" />
              <h4 className="font-medium text-purple-900">AI Email Generator</h4>
            </div>
            <p className="text-sm text-purple-700 mb-4">
              Describe what kind of email you want to create, and AI will generate a personalized template based on your lead data and best practices.
            </p>
          </div>

          {/* Context Display */}
          {context && (
            <div className="bg-gray-50 p-3 rounded-lg">
              <h5 className="text-sm font-medium text-gray-700 mb-2">Available Context:</h5>
              <div className="grid grid-cols-2 gap-2 text-sm text-gray-600">
                {context.trigger && <div>Trigger: {context.trigger}</div>}
                {context.workflowType && <div>Workflow: {context.workflowType}</div>}
                {context.leadData && <div>Lead fields: {Object.keys(context.leadData).join(', ')}</div>}
              </div>
            </div>
          )}

          {/* AI Prompt Input */}
          <div className="space-y-3">
            <label className="block text-sm font-medium text-gray-700">
              Describe your email
            </label>
            <textarea
              className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              rows={4}
              placeholder="e.g., Create a follow-up email for fitness leads who downloaded our workout guide but haven't booked a consultation yet. Make it encouraging and include social proof."
              value={aiPrompt}
              onChange={(e) => setAIPrompt(e.target.value)}
            />
            
            {/* AI Suggestions */}
            <div className="flex flex-wrap gap-2">
              {[
                'Welcome email for new gym members',
                'Follow-up for missed consultation',
                'Weekly motivation email with tips',
                'Re-engagement for inactive members'
              ].map((suggestion) => (
                <button
                  key={suggestion}
                  onClick={() => setAIPrompt(suggestion)}
                  className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-gray-100 text-gray-700 hover:bg-gray-200"
                >
                  {suggestion}
                </button>
              ))}
            </div>

            <button
              onClick={generateAITemplate}
              disabled={!aiPrompt.trim() || isGeneratingAI}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isGeneratingAI ? (
                <>
                  <div className="animate-spin -ml-1 mr-3 h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
                  Generating...
                </>
              ) : (
                <>
                  <Wand2 className="w-4 h-4 mr-2" />
                  Generate Email
                </>
              )}
            </button>
          </div>
        </div>
      )}

      {activeTab === 'create' && (
        <div className="text-center py-12 text-gray-500">
          <FileText className="mx-auto h-12 w-12 text-gray-400" />
          <h3 className="mt-2 text-sm font-medium text-gray-900">Create New Template</h3>
          <p className="mt-1 text-sm text-gray-500">
            Template creation form will be implemented here
          </p>
        </div>
      )}

      {/* Selected Template Preview */}
      {showPreview && selectedTemplate && (
        <div className="mt-6 border-t pt-6">
          <div className="bg-gray-50 p-4 rounded-lg">
            <div className="flex items-center justify-between mb-3">
              <h4 className="font-medium text-gray-900">Preview: {selectedTemplate.name}</h4>
              <button
                onClick={() => setShowPreview(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                âœ•
              </button>
            </div>
            <div className="space-y-3">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Subject:</label>
                <div className="bg-white p-2 rounded border text-sm">{selectedTemplate.subject}</div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Content:</label>
                <div className="bg-white p-3 rounded border text-sm whitespace-pre-wrap max-h-32 overflow-y-auto">
                  {selectedTemplate.content}
                </div>
              </div>
              {selectedTemplate.performance && (
                <div className="flex items-center space-x-6 text-sm">
                  <span className="text-green-600">
                    Open Rate: {Math.round(selectedTemplate.performance.openRate * 100)}%
                  </span>
                  <span className="text-blue-600">
                    Click Rate: {Math.round(selectedTemplate.performance.clickRate * 100)}%
                  </span>
                  <span className="text-purple-600">
                    Conversion: {Math.round(selectedTemplate.performance.conversationRate * 100)}%
                  </span>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  )
}